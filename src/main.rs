use actix_files::Files;
use actix_web::{web, App, HttpServer, HttpResponse, Responder};
use dotenv::dotenv;
use tera::{Tera, Context};

mod api;
mod handlers;
mod models;
mod utils;

// üëá –ì–ª–∞–≤–Ω–∞—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –ø–æ–∏—Å–∫–∞
async fn index(tmpl: web::Data<Tera>) -> impl Responder {
    let ctx = Context::new();
    let rendered = tmpl.render("index.html", &ctx).unwrap();
    HttpResponse::Ok().body(rendered)
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    dotenv().ok();
    println!("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://127.0.0.1:8080");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ Tera
    let tera = Tera::new("src/templates/**/*").unwrap();

    HttpServer::new(move || {
        App::new()
            .app_data(web::Data::new(tera.clone()))
            .route("/", web::get().to(index))
            .route("/search", web::post().to(handlers::news_handler::search))
            .route("/news/{symbol}", web::get().to(handlers::news_handler::get_news))
            // üî• –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CSS-—Ñ–∞–π–ª–æ–≤ –∏–∑ /static
            .service(Files::new("/static", "./static").show_files_listing())
    })
    .bind(("127.0.0.1", 8080))?
    .run()
    .await
}
